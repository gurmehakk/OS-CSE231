Question-1 README
For this question we were supposed to bifercate the whole question in 3 files so as to demonstrate the exec() family of system calls
and make use of signals
In S1 we first make a fork call where further function gets performed depending of the child processs or the parent.In the child
     process where forkwill return 0 
    we are expected to handle the signal SIGTERM 
while in the parent process where pid>0,
I first make the second fork call . In the child process of this 2nd fork call, we were supposed to go to the sr file
I do this by using the execv() system call which replaces the current process with a new process specified by path.
     It takes in an array of character pointers as an argumentand in case of  error it returns -1. In this character p array 
     I have also passed the pid of the process by converting it into a string.
    
     so now as we are in the sr file, this file has a main function that makes a signal call to raise an alarm
         after some interval using the setitimer() system call. This will repeatedly send a SIGALRM signal.
        In sigalarm_handler() we use inline assembly to get the random number generated by cpu using RDRAND instruction.I have used 
        sigqueue(S1process,SIGTERM,sig) to send to S1 the random number generated.
        
Now when we reach the parent process of this 2nd fork call, we are expected to make another fork call i.e the 3rd fork call
 now, in the 3rd fork call , on reaching the child process of fork3, again performing the similar steps I reach the st file
 This file also contains the functionality of raising an alarm after some interval using the setitimer() system call just like in sr file
 Again I handle the SIGALRM signal and in its handler , we use inline assembly to perform RDTSC instruction to read CPU timestamp counters. 
 then we were supposed to change it to a human readable string that should be saved in the shared memory space created. We then use kill() to 
    send a signal to s1.
 